{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "workspaceName": {
      "type": "string"
    },
    "location": {
      "type": "string"
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2017-03-15-preview",
      "name": "[parameters('workspaceName')]",
      "location": "[parameters('location')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "vimDnsNative",
          "dependsOn": [
            "[concat('Microsoft.OperationalInsights/workspaces/', parameters('workspaceName'))]"
          ],
          "properties": {
            "etag": "*",
            "displayName": "DNS activity ASIM filtering parser for Microsoft Sentinel native DNS table",
            "category": "Security",
            "FunctionAlias": "vimDnsNative",
            "query": "let parser=\n (\n   starttime:datetime=datetime(null), \n   endtime:datetime=datetime(null),\n   srcipaddr:string='*',\n   domain_has_any:dynamic=dynamic([]),\n   responsecodename:string='*', \n   response_has_ipv4:string='*',\n   response_has_any_prefix:dynamic=dynamic([]),\n   eventtype:string='Query',\n   disabled:bool=false\n )\n {\n   ASimDnsActivityLogs  | where not(disabled)\n   //  -- Pre-parsing filtering:\n   | where\n       (response_has_ipv4=='*') and (response_has_any_prefix=='*') // -- Check that unsupported filters are set to default\n       and (isnull(starttime) or TimeGenerated >= starttime)\n       and (isnull(endtime) or TimeGenerated <= endtime)\n       and (srcipaddr=='*' or SrcIpAddr==srcipaddr)\n       and (array_length(domain_has_any) ==0 or DnsQuery has_any (domain_has_any))\n       and (responsecodename=='*' or EventResultDetails == responsecodename)\n       //and (response_has_ipv4=='*' or has_ipv4(IPAddresses,response_has_ipv4) )\n       //and (array_length(response_has_any_prefix) ==0 or has_any_ipv4_prefix(IPAddresses, response_has_any_prefix)  )\n       and (eventtype == \"*\" or eventtype == EventType or (eventtype == \"lookup\" and EventType == \"Query\")) // -- Support \"lookup\" as value for backward compatibility\n   // --\n   | extend\n       EventStartTime = TimeGenerated,\n       EventEndTime = TimeGenerated,\n       EventSchema = \"Dns\",\n       EventSchemaVersion=\"0.1.3\"\n   //  -- Aliases\n   | extend\n       Dvc = DvcHostname,\n       DnsResponseCodeName=EventResultDetails,\n       Domain=DnsQuery,\n       IpAddr=SrcIpAddr,\n       Src=SrcIpAddr,\n Duration=DnsNetworkDuration,\n SessionId=DnsSessionId};\n parser (starttime, endtime, srcipaddr, domain_has_any, responsecodename, response_has_ipv4, response_has_any_prefix, eventtype, disabled)\n",
            "version": 1,
            "functionParameters": "starttime:datetime=datetime(null), endtime:datetime=datetime(null), srcipaddr:string='*', domain_has_any:dynamic=dynamic([]), responsecodename:string='*', response_has_ipv4:string='*', response_has_any_prefix:dynamic=dynamic([]), eventtype:string='Query', disabled:bool=False"
          }
        }
      ]
    }
  ]
}