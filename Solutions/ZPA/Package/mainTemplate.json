{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "author": "Manoj Arimanda - v-marimanda@microsoft.com",
    "comments": "Solution template for Zscaler Private Access"
  },
  "parameters": {
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
      }
    },
    "workspace-location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "[concat('Region to deploy solution resources -- separate from location selection',parameters('location'))]"
      }
    },
    "workspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace name for Log Analytics where Sentinel is setup"
      }
    },
    "connector1-name": {
      "type": "string",
      "defaultValue": "3a6fce58-189b-4599-a620-e30fc30bed7c"
    }
  },
  "variables": {
    "connector1-source": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.OperationalInsights/workspaces/',parameters('workspace'),'/providers/Microsoft.SecurityInsights/dataConnectors/',parameters('connector1-name'))]",
    "_connector1-source": "[variables('connector1-source')]",
    "ZscalerPrivateAccessConnector": "ZscalerPrivateAccessConnector",
    "_ZscalerPrivateAccessConnector": "[variables('ZscalerPrivateAccessConnector')]",
    "workspace-dependency": "[concat('Microsoft.OperationalInsights/workspaces/', parameters('workspace'))]",
    "ZPAEvent_Parser": "ZPAEvent_Parser",
    "_ZPAEvent_Parser": "[variables('ZPAEvent_Parser')]",
    "sourceId": "azuresentinel.azure-sentinel-solution-zscalerprivateaccess",
    "_sourceId": "[variables('sourceId')]"
  },
  "resources": [
    {
      "id": "[variables('_connector1-source')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',parameters('connector1-name'))]",
      "apiVersion": "2021-03-01-preview",
      "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
      "location": "[parameters('workspace-location')]",
      "kind": "GenericUI",
      "properties": {
        "connectorUiConfig": {
          "title": "Zscaler Private Access",
          "publisher": "Zscaler",
          "descriptionMarkdown": "The [Zscaler Private Access (ZPA)](https://help.zscaler.com/zpa/what-zscaler-private-access) data connector provides the capability to ingest [Zscaler Private Access events](https://help.zscaler.com/zpa/log-streaming-service) into Azure Sentinel. Refer to [Zscaler Private Access documentation](https://help.zscaler.com/zpa) for more information.",
          "graphQueries": [
            {
              "metricName": "Total data received",
              "legend": "ZPA_CL",
              "baseQuery": "ZPA_CL"
            }
          ],
          "sampleQueries": [
            {
              "description": "All logs",
              "query": "\nZPAEvent\n| sort by TimeGenerated"
            }
          ],
          "dataTypes": [
            {
              "name": "ZPA_CL",
              "lastDataReceivedQuery": "ZPA_CL\n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            }
          ],
          "connectivityCriterias": [
            {
              "type": "IsConnectedQuery",
              "value": [
                "ZPA_CL\n            | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(30d)"
              ]
            }
          ],
          "availability": {
            "status": 1,
            "isPreview": true
          },
          "permissions": {
            "resourceProvider": [
              {
                "provider": "Microsoft.OperationalInsights/workspaces",
                "permissionsDisplayText": "read and write permissions are required.",
                "providerDisplayName": "Workspace",
                "scope": "Workspace",
                "requiredPermissions": {
                  "write": true,
                  "read": true,
                  "delete": true
                }
              },
              {
                "provider": "Microsoft.OperationalInsights/workspaces/sharedKeys",
                "permissionsDisplayText": "read permissions to shared keys for the workspace are required. [See the documentation to learn more about workspace keys](https://docs.microsoft.com/azure/azure-monitor/platform/agent-windows#obtain-workspace-id-and-key).",
                "providerDisplayName": "Keys",
                "scope": "Workspace",
                "requiredPermissions": {
                  "action": true
                }
              }
            ]
          },
          "instructionSteps": [
            {
              "description": ">**NOTE:** This data connector depends on a parser based on a Kusto Function to work as expected. [Follow these steps](https://aka.ms/sentinel-ZscalerPrivateAccess-parser) to create the Kusto Functions alias, **ZPAEvent**"
            },
            {
              "description": ">**NOTE:** This data connector has been developed using Zscaler Private Access version: 21.67.1"
            },
            {
              "description": "Install the agent on the Server where the Zscaler Private Access logs are forwarded.\n\n> Logs from Zscaler Private Access Server deployed on Linux or Windows servers are collected by **Linux** or **Windows** agents.",
              "instructions": [
                {
                  "parameters": {
                    "title": "Choose where to install the Linux agent:",
                    "instructionSteps": [
                      {
                        "title": "Install agent on Azure Linux Virtual Machine",
                        "description": "Select the machine to install the agent on and then click **Connect**.",
                        "instructions": [
                          {
                            "parameters": {
                              "linkType": "InstallAgentOnLinuxVirtualMachine"
                            },
                            "type": "InstallAgent"
                          }
                        ]
                      },
                      {
                        "title": "Install agent on a non-Azure Linux Machine",
                        "description": "Download the agent on the relevant machine and follow the instructions.",
                        "instructions": [
                          {
                            "parameters": {
                              "linkType": "InstallAgentOnLinuxNonAzure"
                            },
                            "type": "InstallAgent"
                          }
                        ]
                      }
                    ]
                  },
                  "type": "InstructionStepsGroup"
                }
              ],
              "title": "1. Install and onboard the agent for Linux or Windows"
            },
            {
              "instructions": [
                {
                  "parameters": {
                    "title": "Choose where to install the Windows agent:",
                    "instructionSteps": [
                      {
                        "title": "Install agent on Azure Windows Virtual Machine",
                        "description": "Select the machine to install the agent on and then click **Connect**.",
                        "instructions": [
                          {
                            "parameters": {
                              "linkType": "InstallAgentOnVirtualMachine"
                            },
                            "type": "InstallAgent"
                          }
                        ]
                      },
                      {
                        "title": "Install agent on a non-Azure Windows Machine",
                        "description": "Download the agent on the relevant machine and follow the instructions.",
                        "instructions": [
                          {
                            "parameters": {
                              "linkType": "InstallAgentOnNonAzure"
                            },
                            "type": "InstallAgent"
                          }
                        ]
                      }
                    ]
                  },
                  "type": "InstructionStepsGroup"
                }
              ]
            },
            {
              "description": "Follow the configuration steps below to get Zscaler Private Access logs into Azure Sentinel. Refer to the [Azure Monitor Documentation](https://docs.microsoft.com/azure/azure-monitor/agents/data-sources-json) for more details on these steps.\nZscaler Private Access logs are delivered via Log Streaming Service (LSS). Refer to [LSS documentation](https://help.zscaler.com/zpa/about-log-streaming-service) for detailed information\n1. Configure [Log Receivers](https://help.zscaler.com/zpa/configuring-log-receiver). While configuring a Log Receiver, choose **JSON** as **Log Template**.\n2. Download config file [zpa.conf](https://aka.ms/sentinel-ZscalerPrivateAccess-conf) \n\t\twget -v https://aka.ms/sentinel-zscalerprivateaccess-conf -O zpa.conf\n3. Login to the server where you have installed Azure Log Analytics agent.\n4. Copy zpa.conf to the /etc/opt/microsoft/omsagent/**workspace_id**/conf/omsagent.d/ folder.\n5. Edit zpa.conf as follows:\n\n\t a. specify port which you have set your Zscaler Log Receivers to forward logs to (line 4)\n\n\t b. zpa.conf uses the port **22033** by default. Ensure this port is not being used by any other source on your server\n\n\t c. If you would like to change the default port for **zpa.conf** make sure that it should not get conflict with default AMA agent ports I.e.(For example CEF uses TCP port **25226** or **25224**) \n\n\t d. replace **workspace_id** with real value of your Workspace ID (lines 14,15,16,19)\n5. Save changes and restart the Azure Log Analytics agent for Linux service with the following command:\n\t\tsudo /opt/microsoft/omsagent/bin/service_control restart",
              "instructions": [
                {
                  "parameters": {
                    "fillWith": [
                      "WorkspaceId"
                    ],
                    "label": "Workspace ID"
                  },
                  "type": "CopyableLabel"
                }
              ],
              "title": "2. Configure the logs to be collected"
            }
          ],
          "additionalRequirementBanner": "This data connector depends on a parser based on Kusto Function to work as expected. Follow the steps to use this Kusto Function alias **ZPAEvent** in queries and workbooks. [Follow steps to get this Kusto Function>](https://aka.ms/sentinel-ZscalerPrivateAccess-parser)"
        }
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2020-08-01",
      "name": "[parameters('workspace')]",
      "location": "[parameters('workspace-location')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "Zscaler Private Access Data Parser",
          "dependsOn": [
            "[variables('workspace-dependency')]"
          ],
          "properties": {
            "eTag": "*",
            "displayName": "Zscaler Private Access Data Parser",
            "category": "Samples",
            "functionAlias": "ZPAEvent",
            "query": "\nlet ZPAEvent_view = view () {\r\n    ZPA_CL | where isnotempty(Message)\r\n| extend tmp = parse_json(Message)\r\n| evaluate bag_unpack(tmp)\r\n| extend\r\n        EventVendor=\"Zscaler\",\r\n        EventProduct=\"Private Access\"\r\n};\r\nlet ZPAEvent_main_view = view () {\r\n    ZPAEvent_view \r\n    | extend\r\n            LogTimestamp=column_ifexists('LogTimestamp', ''),\r\n            Customer=column_ifexists('Customer', ''),\r\n            NetworkSessionId=column_ifexists('SessionID', ''),\r\n            ConnectionID=column_ifexists('ConnectionID', ''),\r\n            EventResult=column_ifexists('InternalReason', column_ifexists('ConnectionStatus', '')),\r\n            DvcAction=column_ifexists('ConnectionStatus', column_ifexists('SessionStatus', '')),\r\n            NetworkProtocol=column_ifexists('IPProtocol', ''),\r\n            DoubleEncryption=column_ifexists('DoubleEncryption', ''),\r\n            DstUserName=column_ifexists('Username', column_ifexists('User', '')),\r\n            DstPortNumber=column_ifexists('ServicePort', column_ifexists('ServerPort', column_ifexists('ApplicationPort', ''))),\r\n            SrcIpAddr=column_ifexists('ClientPublicIP', ''),\r\n            SrcNatIpAddr=column_ifexists('ClientPrivateIP', ''),\r\n            SrcGeoLatitude=column_ifexists('ClientLatitude', ''),\r\n            SrcGeoLongitude=column_ifexists('ClientLongitude', ''),\r\n            SrcGeoCountry=column_ifexists('ClientCountryCode', ''),\r\n            ClientZEN=column_ifexists('ClientZEN', ''),\r\n            NetworkRuleName=column_ifexists('Policy', ''),\r\n            ConnectorZEN=column_ifexists('ConnectorZEN', ''),\r\n            ConnectorIP=column_ifexists('ConnectorIP', ''),\r\n            ConnectorPort=column_ifexists('ConnectorPort', ''),\r\n            SrcDvcHostname=column_ifexists('Host', ''),\r\n            Application=column_ifexists('Application', ''),\r\n            AppGroup=column_ifexists('AppGroup', ''),\r\n            DstDomainHostname=column_ifexists('Server', ''),\r\n            DstIpAddr=column_ifexists('ServerIP', ''),\r\n            PolicyProcessingTime=column_ifexists('PolicyProcessingTime', ''),\r\n            CAProcessingTime=column_ifexists('CAProcessingTime', ''),\r\n            ConnectorZENSetupTime=column_ifexists('ConnectorZENSetupTime', ''),\r\n            ConnectionSetupTime=column_ifexists('ConnectionSetupTime', ''),\r\n            ServerSetupTime=column_ifexists('ServerSetupTime', ''),\r\n            AppLearnTime=column_ifexists('AppLearnTime', ''),\r\n            TimestampConnectionStart=column_ifexists('TimestampConnectionStart', ''),\r\n            TimestampConnectionEnd=column_ifexists('TimestampConnectionEnd', ''),\r\n            TimestampCATx=column_ifexists('TimestampCATx', ''),\r\n            TimestampCARx=column_ifexists('TimestampCARx', ''),\r\n            TimestampAppLearnStart=column_ifexists('TimestampAppLearnStart', ''),\r\n            TimestampZENFirstRxClient=column_ifexists('TimestampZENFirstRxClient', ''),\r\n            TimestampZENFirstTxClient=column_ifexists('TimestampZENFirstTxClient', ''),\r\n            TimestampZENLastRxClient=column_ifexists('TimestampZENLastRxClient', ''),\r\n            TimestampZENLastTxClient=column_ifexists('TimestampZENLastTxClient', ''),\r\n            TimestampConnectorZENSetupComplete=column_ifexists('TimestampConnectorZENSetupComplete', ''),\r\n            TimestampZENFirstRxConnector=column_ifexists('TimestampZENFirstRxConnector', ''),\r\n            TimestampZENFirstTxConnector=column_ifexists('TimestampZENFirstTxConnector', ''),\r\n            TimestampZENLastRxConnector=column_ifexists('TimestampZENLastRxConnector', ''),\r\n            TimestampZENLastTxConnector=column_ifexists('TimestampZENLastTxConnector', ''),\r\n            SrcBytes=column_ifexists('ZENTotalBytesRxClient', column_ifexists('TotalBytesRx', column_ifexists('TotalBytesRx', ''))),\r\n            ZENBytesRxClient=column_ifexists('ZENBytesRxClient', ''),\r\n            DstBytes=column_ifexists('ZENTotalBytesTxClient', column_ifexists('TotalBytesTx', column_ifexists('TotalBytesTx', ''))),\r\n            ZENBytesTxClient=column_ifexists('ZENBytesTxClient', ''),\r\n            ZENTotalBytesRxConnector=column_ifexists('ZENTotalBytesRxConnector', ''),\r\n            ZENBytesRxConnector=column_ifexists('ZENBytesRxConnector', ''),\r\n            ZENTotalBytesTxConnector=column_ifexists('ZENTotalBytesTxConnector', ''),\r\n            ZENBytesTxConnector=column_ifexists('ZENBytesTxConnector', ''),\r\n            Idp=column_ifexists('Idp', ''),\r\n            Version=column_ifexists('Version', ''),\r\n            ZEN=column_ifexists('ZEN', ''),\r\n            CertificateCN=column_ifexists('CertificateCN', ''),\r\n            PrivateIP=column_ifexists('PrivateIP', ''),\r\n            DvcIpAddr=column_ifexists('PublicIP', ''),\r\n            Latitude=column_ifexists('Latitude', ''),\r\n            Longitude=column_ifexists('Longitude', ''),\r\n            CountryCode=column_ifexists('CountryCode', ''),\r\n            TimestampAuthentication=column_ifexists('TimestampAuthentication', ''),\r\n            TimestampUnAuthentication=column_ifexists('TimestampUnAuthentication', ''),\r\n            DvcHostname=column_ifexists('Hostname', ''),\r\n            SrcDvcOs=column_ifexists('Platform', ''),\r\n            DvcType=column_ifexists('ClientType', ''),\r\n            TrustedNetworks=column_ifexists('TrustedNetworks', ''),\r\n            TrustedNetworksNames=column_ifexists('TrustedNetworksNames', ''),\r\n            SAMLAttributes=column_ifexists('SAMLAttributes', ''),\r\n            PosturesHit=column_ifexists('PosturesHit', ''),\r\n            PosturesMiss=column_ifexists('PosturesMiss', ''),\r\n            ZENLatitude=column_ifexists('ZENLatitude', ''),\r\n            ZENLongitude=column_ifexists('ZENLongitude', ''),\r\n            ZENCountryCode=column_ifexists('ZENCountryCode', ''),\r\n            SessionType=column_ifexists('SessionType', ''),\r\n            Connector=column_ifexists('Connector', ''),\r\n            ConnectorGroup=column_ifexists('ConnectorGroup', ''),\r\n            CPUUtilization=column_ifexists('CPUUtilization', ''),\r\n            MemUtilization=column_ifexists('MemUtilization', ''),\r\n            ServiceCount=column_ifexists('ServiceCount', ''),\r\n            InterfaceDefRoute=column_ifexists('InterfaceDefRoute', ''),\r\n            DefRouteGW=column_ifexists('DefRouteGW', ''),\r\n            PrimaryDNSResolver=column_ifexists('PrimaryDNSResolver', ''),\r\n            HostUpTime=column_ifexists('HostUpTime', ''),\r\n            ConnectorUpTime=column_ifexists('ConnectorUpTime', ''),\r\n            NumOfInterfaces=column_ifexists('NumOfInterfaces', ''),\r\n            BytesRxInterface=column_ifexists('BytesRxInterface', ''),\r\n            PacketsRxInterface=column_ifexists('PacketsRxInterface', ''),\r\n            ErrorsRxInterface=column_ifexists('ErrorsRxInterface', ''),\r\n            DiscardsRxInterface=column_ifexists('DiscardsRxInterface', ''),\r\n            BytesTxInterface=column_ifexists('BytesTxInterface', ''),\r\n            PacketsTxInterface=column_ifexists('PacketsTxInterface', ''),\r\n            ErrorsTxInterface=column_ifexists('ErrorsTxInterface', ''),\r\n            DiscardsTxInterface=column_ifexists('DiscardsTxInterface', ''),\r\n            ModifiedTime=column_ifexists('ModifiedTime', ''),\r\n            CreationTime=column_ifexists('CreationTime', ''),\r\n            ModifiedBy=column_ifexists('ModifiedBy', ''),\r\n            RequestID=column_ifexists('RequestID', ''),\r\n            AuditOldValue=column_ifexists('AuditOldValue', ''),\r\n            AuditNewValue=column_ifexists('AuditNewValue', ''),\r\n            AuditOperationType=column_ifexists('AuditOperationType', ''),\r\n            ObjectType=column_ifexists('ObjectType', ''),\r\n            ObjectName=column_ifexists('ObjectName', ''),\r\n            ObjectID=column_ifexists('ObjectID', ''),\r\n            CustomerID=column_ifexists('CustomerID', ''),\r\n            Exporter=column_ifexists('Exporter', ''),\r\n            TimestampRequestReceiveStart=column_ifexists('TimestampRequestReceiveStart', ''),\r\n            TimestampRequestReceiveHeaderFinish=column_ifexists('TimestampRequestReceiveHeaderFinish', ''),\r\n            TimestampRequestReceiveFinish=column_ifexists('TimestampRequestReceiveFinish', ''),\r\n            TimestampRequestTransmitStart=column_ifexists('TimestampRequestTransmitStart', ''),\r\n            TimestampRequestTransmitFinish=column_ifexists('TimestampRequestTransmitFinish', ''),\r\n            TimestampResponseReceiveStart=column_ifexists('TimestampResponseReceiveStart', ''),\r\n            TimestampResponseReceiveFinish=column_ifexists('TimestampResponseReceiveFinish', ''),\r\n            TimestampResponseTransmitStart=column_ifexists('TimestampResponseTransmitStart', ''),\r\n            TimestampResponseTransmitFinish=column_ifexists('TimestampResponseTransmitFinish', ''),\r\n            TotalTimeRequestReceive=column_ifexists('TotalTimeRequestReceive', ''),\r\n            TotalTimeRequestTransmit=column_ifexists('TotalTimeRequestTransmit', ''),\r\n            TotalTimeResponseReceive=column_ifexists('TotalTimeResponseReceive', ''),\r\n            TotalTimeResponseTransmit=column_ifexists('TotalTimeResponseTransmit', ''),\r\n            TotalTimeConnectionSetup=column_ifexists('TotalTimeConnectionSetup', ''),\r\n            TotalTimeServerResponse=column_ifexists('TotalTimeServerResponse', ''),\r\n            HttpRequestMethod=column_ifexists('Method', ''),\r\n            NetworkApplicationProtocol=column_ifexists('Protocol', ''),\r\n            UrlHostname=column_ifexists('Host', ''),\r\n            UrlOriginal=column_ifexists('URL', ''),\r\n            HttpUserAgentOriginal=column_ifexists('UserAgent', ''),\r\n            HttpRequestXff=column_ifexists('XFF', ''),\r\n            NameID=column_ifexists('NameID', ''),\r\n            HttpStatusCode=column_ifexists('StatusCode', ''),\r\n            HttpRequestBodyBytes=column_ifexists('RequestSize', ''),\r\n            HttpResponseBodyBytes=column_ifexists('ResponseSize', ''),\r\n            SrcPortNumber=column_ifexists('ClientPublicPort', ''),\r\n            EventResultDetails=column_ifexists('ConnectionReason', ''),\r\n            CorsToken=column_ifexists('CorsToken', ''),\r\n            Origin=column_ifexists('Origin', '')\r\n};\r\nZPAEvent_main_view\r\n",
            "version": 1
          }
        }
      ]
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2021-03-01-preview",
      "properties": {
        "version": "1.0.0",
        "kind": "Solution",
        "contentId": "[variables('_sourceId')]",
        "parentId": "[variables('_sourceId')]",
        "source": {
          "kind": "Solution",
          "name": "Zscaler Private Access",
          "sourceId": "[variables('_sourceId')]"
        },
        "author": {
          "name": "Manoj Arimanda",
          "email": "v-marimanda@microsoft.com"
        },
        "support": {
          "name": "Microsoft Corporation",
          "email": "support@microsoft.com",
          "tier": "Microsoft",
          "link": "https://support.microsoft.com"
        },
        "dependencies": {
          "operator": "AND",
          "criteria": [
            {
              "kind": "DataConnector",
              "contentId": "[variables('_ZscalerPrivateAccessConnector')]",
              "version": "1.0.0"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('_ZPAEvent_Parser')]",
              "version": "1.0.0"
            }
          ]
        },
        "firstPublishDate": "2022-01-31",
        "providers": [
          "Zscaler"
        ],
        "categories": {
          "domains": [
            "Security – Network"
          ]
        }
      },
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('_sourceId'))]"
    }
  ],
  "outputs": {}
}
